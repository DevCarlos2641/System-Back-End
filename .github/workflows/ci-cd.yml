name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  actions: read
  contents: read
  security-events: write

env:
  IMAGE_NAME: carlos2641/app-system

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      docker:
        image: docker:24.0.7
        options: --privileged
        ports:
          - 2375:2375

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Grant execute permission for Gradle
        run: chmod +x gradlew

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: java

      - name: Build project
        run: ./gradlew build -x test

      - name: Perform CodeQL analysis
        uses: github/codeql-action/analyze@v3

#      - name: Run unit tests
#        run: ./gradlew test
#
#      - name: Generate code coverage
#        run: ./gradlew jacocoTestReport

      - name: Build Docker image
        run: docker build -t $IMAGE_NAME:latest .

      - name: Scan Docker image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.IMAGE_NAME }}:latest

      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Push Docker image
        run: docker push $IMAGE_NAME:latest

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Deploy over SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            docker pull $IMAGE_NAME:latest
            docker stop app || true
            docker rm app || true
            docker run -d --name app -p 80:8080 $IMAGE_NAME:latest
